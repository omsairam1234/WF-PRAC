                      SOFTWARE ARCHITECTURE AND DESIGN PATTERN
Q.1 Write a JAVA Program to implement built-in support (java.util.Observable) Weather station with members temperature, humidity, pressure and methods mesurmentsChanged(), setMesurment(), getTemperature(), getHumidity(), getPressure()
1. Create Interface Observer.java
package javaprograms;

public interface Observer {

public void update(float temp,float humidity,float pressure);

}

Displayelement.java

package hello;

public interface DisplayElement {

public void display();
}

Subject.java

package hello;



public interface Subject {



public void registerObserver(Observer o); public void removeObserver(Observer o); public void notifyObservers();
}
2. create classes
CurrentConditionDispaly.java package hello;
public class CurrentConditionDispaly implements Observer,DisplayElement {

private float temprature; private float humidity; private Subject weatherData;
public CurrentConditionDispaly(Subject weatherData)

{

this.weatherData=weatherData; weatherData.registerObserver(this);
    }
public void update(float temprature,float humidity,float pressure) {

this.temprature=temprature; this.humidity=humidity; display();
}

public void display()

{

              System.out.println("current conditions:"+temprature+"F degree and "+humidity+"% humidity");

}
}


ForecastDisplay.java

package hello;

  public class ForecastDisplay implements Observer,DisplayElement {


private float currentpressure=29.92f;

private float lastpressure;

private WeatherData weatherData;





public ForecastDisplay(WeatherData weaherdata) {

this.weatherData=weatherData;

weatherData.registerObserver(this);

}



public void update(float temp,float humidity,float pressure) { lastpressure=currentpressure;
currentpressure=pressure; display();
}

public void display()

{

System.out.println("forecast:");

if(currentpressure > lastpressure) { System.out.println("improving weather on the way!.");
}else if(currentpressure==lastpressure) { System.out.println("more of the same");
}else if(currentpressure < lastpressure) { System.out.println("watch out for cooler,rainy weather");
}
                       }
              }

HeatIndexDisplay.java package hello;


public class HeatIndexDisplay implements Observer,DisplayElement {

float heatIndex=0.0f;

private WeatherData weatherData;

public HeatIndexDisplay(WeatherData weatherData) { this.weatherData=weatherData; weatherData.registerObserver(this);
}

public void update(float t,float rh,float pressure) { heatIndex=computeHeatIndex(t,rh);

display();
}

private float computeHeatIndex(float t,float rh) {

              float index=(float)((16.923 + (0.185212 * t) + (5.37941 * rh) - (0.100254 * t * rh) + (0.000345372 *(t * t * rh ))) +(0.00728898 * (rh * rh))
+ (0.000345372 * (t * t * rh)) - (0.000814971 * (t * rh * rh))+ (0.0000102102 * (t * t * rh * rh)) -(0.000038646 * (t * t * t)) + (0.0000291683 * (rh * rh * rh)) + (0.00000142721 * (t * t * t * rh )) + (0.000000197483 * (t * rh * rh * rh)) - (0.000000218429 * (t * t * t * rh * rh )) + (0.000000000843296 * (t * t * rh * rh * rh)) - (0.0000000000481975 *
(t * t * t * rh * rh * rh)));

return index;

}

public void display()

{

System.out.println("heat index"+heatIndex);

}

}

StatisticDisplay.java

package hello;



public class StatisticDisplay implements Observer,DisplayElement {

private float maxTemp=0.0f; private float minTemp=200; private float tempSum=0.0f; private int numReadings;
private WeatherData weatherData; 
public StatisticDisplay(WeatherData weatherData) { this.weatherData=weatherData; weatherData.registerObserver(this);
}

public void update(float temp,float humidity,float pressure)
{

tempSum=temp; numReadings++;
if(temp > maxTemp)

{
           maxTemp=temp;

}

if(temp < minTemp) { minTemp=temp;
}

display();

}
public void display()

{

System.out.println("AVG?MIN?MAX temprature="+(tempSum/numReadings
)+"/"+maxTemp+"/"+minTemp);



}

}


WeatherData.java package hello;
import java.util.ArrayList;

public class WeatherData implements Subject{ private ArrayList<Observer> observers; private float temprature;
private float humidity;

private float pressure;

public WeatherData() { observers=new ArrayList<>();
}
public void registerObserver(Observer o) { observers.add(o);
}

public void removeObserver(Observer o) { int i=observers.indexOf(o); if(i>=0) {
observers.remove(i);

}
                 }

public void notifyObservers() {

for(int i=0;i<observers.size();i++) {

Observer observer=(Observer)observers.get(i); observer.update(temprature, humidity, pressure);
}
}

public void measurementChanged() { notifyObservers();
}

public void setMeasurement(float temprature,float humidity,float pressure) {

this.temprature=temprature; this.humidity=humidity; this.pressure=pressure; measurementChanged();
}

public float getTemprature()

{

return temprature;

}

public float gethumidity()

{

return humidity;

}

public float getpressure()

{

return pressure;

}

}

WeatherStation.java package hello; import java.io.*;
public class WeatherStation {



public static void main(String[] args) {

// TODO Auto-generated method stub

//try {
WeatherData weatherData=new WeatherData(); CurrentConditionDispaly currentDisplay=new
CurrentConditionDispaly(weatherData);

              StatisticDisplay statisticDisplay=new StatisticDisplay(weatherData);

weatherData.setMeasurement(80,65,30.4f); weatherData.setMeasurement(82, 70,29.2f); weatherData.setMeasurement(78,90,29.2f);
}

}

Output-

current conditions:80.0F degree and 65.0% humidity AVG?MIN?MAX temprature=80.0/80.0/80.0
current conditions:82.0F degree and 70.0% humidity AVG?MIN?MAX temprature=41.0/82.0/80.0
current conditions:78.0F degree and 90.0% humidity AVG?MIN?MAX temprature=26.0/82.0/78.0
 

Q.2 Write a Java Program to implement I/O Decorator for converting uppercase letters to lower case letters.
1. Create Interface:
public interface ToLowerDecorator {
public void lower(String ch);
}

2. LowerCase.java package javaprograms; import java.lang.*; import java.io.*;
public class LowerCase implements ToLowerDecorator{
public void lower(String ch)
{
ch=ch.toLowerCase(); System.out.println("Lowercase:"+ch);
}
}
3.Decorator.java package javaprograms; import java.io.*;
import java.util.Scanner;
public class Decorator {
public static void main(String[] args) {
// TODO Auto-generated method stub ToLowerDecorator l=new LowerCase();
//l.lower("HeLLO");
     Scanner sc=new Scanner(System.in); System.out.println("enter character:"); String	s=sc.nextLine(); System.out.println("entered character:"+s);
l.lower(s);
}
}


Output –
enter character:
HELLO
entered character:HELLO Lowercase:hello




Q.3Write a Java Program to implement Factory method for Pizza Store with createPizza(), orederPizza(), prepare(), Bake(), cut(), box(). Use this to create variety of pizzas like NyStyleCheesePizza, ChicagoStyleCheesePizza etc.

Create Class – 1)Pizza.class
package javaprograms;
import java.util.ArrayList;

abstract public class Pizza { String name;
String dough; String sauce;
ArrayList toppings = new ArrayList();

public String getName() {
return name;
}

public void prepare() { System.out.println("Preparing " + name);
}

public void bake() { System.out.println("Baking " + name);
}

public void cut() { System.out.println("Cutting " + name);
}

public void box() { System.out.println("Boxing " + name);
}

public String toString() {
// code to display pizza name and ingredients StringBuffer display = new StringBuffer(); display.append("---- " + name + "	\n");
display.append(dough + "\n"); display.append(sauce + "\n");
for (int i = 0; i < toppings.size(); i++) { display.append((String) toppings.get(i) + "\n");
}
return display.toString();

}
}
2)PizzaStore.class
package javaprograms;

public class PizzaStore { SimplePizzaFactory factory;

public PizzaStore(SimplePizzaFactory factory) {
this.factory = factory;
}

public Pizza orderPizza(String type) { Pizza pizza;

pizza = factory.createPizza(type);
pizza.prepare(); pizza.bake();
pizza.cut();
pizza.box();

return pizza;
}
}
3)SimplePizzaFactory.class
package javaprograms;

public class SimplePizzaFactory {

public Pizza createPizza(String type) { Pizza pizza = null;

if (type.equals("cheese")) { pizza = new NYCheesePizza();
} else if (type.equals("veggie")) { pizza = new ChicagoCheesePizza();
}
return pizza;
}
}
4)NYCheesePizza.class
package javaprograms;
public class NYCheesePizza extends Pizza {
public NYCheesePizza() { name = "NY Cheese Pizza";

         dough = "Regular Crust";
sauce = "Marinara Pizza Sauce"; toppings.add("Fresh Mozzarella"); toppings.add("Parmesan");
}
}
5)ChicagoCheesePizza.class
package javaprograms;
public class ChicagoCheesePizza extends Pizza {
public ChicagoCheesePizza() { name = "Chicago Cheese Pizza"; dough = "Crust";
sauce = "Marinara sauce"; toppings.add("Shredded mozzarella"); toppings.add("Grated parmesan"); toppings.add("Diced onion"); toppings.add("Sliced mushrooms"); toppings.add("Sliced red pepper"); toppings.add("Sliced black olives");
}
}

Output-
Preparing NY Cheese Pizza Baking NY Cheese Pizza Cutting NY Cheese Pizza Boxing NY Cheese Pizza
We ordered a NY Cheese Pizza

Preparing Chicago Cheese Pizza Baking Chicago Cheese Pizza Cutting Chicago Cheese Pizza Boxing Chicago Cheese Pizza
   We ordered a Chicago Cheese Pizza



Q.4 Write a java program to implement singleton pattern for multithreading.

package javaprograms;
public class SingletoneTest
{
    private static final int	PROCESSOR_COUNT = Runtime.getRuntime().availableProcessors();
private static final Thread[]	THREADS	= new
Thread[PROCESSOR_COUNT];
private static int	instancesCount = 0;
private static SingletoneTest	instance	= null;

    /*** private constructor to prevent Creation of Object from Outside of the * This class.
*/
private SingletoneTest()
{
}
/*** return the instance only if it does not exist */
public static SingletoneTest getInstance()
{
if (instance == null)
{
instancesCount++;
instance = new SingletoneTest();
}
return instance;
}
/*** reset instancesCount and instance.*/
private static void reset()
{
instancesCount = 0;
instance = null;
}
/*** validate system to run the test*/
private static void validate()
{
if (SingletoneTest.PROCESSOR_COUNT < 2)
{


test.");

}
}

System.out.print("PROCESSOR_COUNT Must be >= 2 to Run the System.exit(0);

public static void main(String... args)
{

validate();
         System.out.printf("Summary :: PROCESSOR_COUNT %s, Running Test with %s of Threads. %n", PROCESSOR_COUNT, PROCESSOR_COUNT);
long currentMili = System.currentTimeMillis();
int testCount = 0;
do
{
reset();
for (int i = 0; i < PROCESSOR_COUNT; i++)
THREADS[i] = new Thread(SingletoneTest::getInstance);

for (int i = 0; i < PROCESSOR_COUNT; i++)
THREADS[i].start();

for (int i = 0; i < PROCESSOR_COUNT; i++)
try
{
THREADS[i].join();
}
catch (InterruptedException e)
{
e.printStackTrace(); Thread.currentThread().interrupt();
}
testCount++;
}
while (instancesCount <= 1 && testCount < Integer.MAX_VALUE);

System.out.printf("Singleton Pattern is broken after %d try.
%nNumber of instances count is %d. %nTest duration %dms", testCount,
instancesCount, System.currentTimeMillis() - currentMili);
}
}


Output-
Summary :: PROCESSOR_COUNT 4, Running Test with 4 of Threads. Singleton Pattern is broken after 144 try.
Number of instances count is 2. Test duration 232ms

 



Q.5 Write a Java Program to implement command pattern to test Remote Control. 
1)Create Interface-

Command.java
package javaprograms;

interface Command
{
public void execute();
}

2) Create Class Light.java
package javaprograms;
public class Light
{
public void on()
{
System.out.println("Light is on");
}
public void off()
{
System.out.println("Light is off");
}
}

LightOnCommand.java
package javaprograms;
class LightOnCommand implements Command
{
Light light;

// The constructor is passed the light it
// is going to control.
public LightOnCommand(Light light)
{
this.light = light;
}
public void execute()
{
light.on();
}
}
 LightOffCommand.java
package javaprograms;
class LightOffCommand implements Command
{
Light light;
public LightOffCommand(Light light)
{
this.light = light;
}
public void execute()
{
light.off();
}
}

 Stereo.java
package javaprograms;

public class Stereo

{

public void on()

{

System.out.println("Stereo
is on");
}

public void off()

{

System.out.println("Stereo
is off");
}

public void setCD()

{

System.out.println("Stereo
is set " +
"for CD
input");
}

public void setDVD()

{

System.out.println("Stereo
is set"+
" for DVD
input");
}

public void setRadio()

{

System.out.println("Stereo
is set" +
" for Radio");
}
public void setVolume(int volume)
{

// code to set the volume
 System.out.println("Stereo volume set"+ " to " + volume);
}
}

StereoOffCommand.java
package javaprograms;

class StereoOffCommand implements Command
{
Stereo stereo;
public StereoOffCommand(Stereo stereo)
{
this.stereo = stereo;
}
public void execute()
{
stereo.off();
}
}

StereoOnWithCDCommand.java
package javaprograms;

class StereoOnWithCDCommand implements Command
{
Stereo stereo;
public StereoOnWithCDCommand(Stereo stereo)
{
this.stereo = stereo;
}
public void execute()
{
stereo.on(); stereo.setCD(); stereo.setVolume(11);
}
}

SimpleRemoteControl.java package javaprograms; class SimpleRemoteControl
{
Command slot; // only one button

            public SimpleRemoteControl()
{
}

public void setCommand(Command command)
{
// set the command the remote will
// execute
slot = command;
}
public void buttonWasPressed()
{
slot.execute();
}
}

RemoteControlTest.java
package javaprograms;

class RemoteControlTest
{
public static void main(String[] args)
{
SimpleRemoteControl remote =
           new SimpleRemoteControl(); Light light = new Light();
Stereo stereo = new Stereo();

// we can change command dynamically remote.setCommand(new 
           LightOnCommand(light));
remote.buttonWasPressed(); remote.setCommand(new
         StereoOnWithCDCommand(stereo)); remote.buttonWasPressed(); remote.setCommand(new
            StereoOffCommand(stereo)); remote.buttonWasPressed();
}
}

Output- Light is on Stereo is on
Stereo is set for CD input Stereo volume set to 11
Stereo is off


Q.6 Write a Java Program to implement undo command to test Ceiling fan.
SimpleRemoteControl class
class SimpleRemoteControl
{
Command slot;

public SimpleRemoteControl()
{
}

public void setCommand(Command command)
{
slot = command;
}
public void buttonWasPressed()
{
slot.execute();
}
}

CeilingFan class
public class CeilingFan { public static final int HIGH = 3;
public static final int MEDIUM = 2; public static final int LOW = 1; public static final int OFF = 0; String location;
int speed;
public CeilingFan(String location) { this.location = location;
speed = OFF; } public void high() { speed = HIGH;
System.out.println(location + " ceiling fan is on high"); } public void medium() {
speed = MEDIUM;
System.out.println(location + " ceiling fan is on medium"); } public void low() {
speed = LOW;
System.out.println(location + " ceiling fan is on low"); } public void off() {
speed = OFF;
System.out.println(location + " ceiling fan is off"); } public int getSpeed() {

return speed; }
}

CeilingFanHighCommand class
public class CeilingFanHighCommand implements Command { CeilingFan ceilingFan;
int prevSpeed;
public CeilingFanHighCommand(CeilingFan ceilingFan) { this.ceilingFan = ceilingFan;
}
public void execute() {
prevSpeed = ceilingFan.getSpeed(); ceilingFan.high();
}
public void undo() {
if (prevSpeed == CeilingFan.HIGH) { ceilingFan.high();
} else if (prevSpeed == CeilingFan.MEDIUM) { ceilingFan.medium();
} else if (prevSpeed == CeilingFan.LOW) { ceilingFan.low();
} else if (prevSpeed == CeilingFan.OFF) { ceilingFan.off();
}
}
}
Command interface
public interface Command { public void execute(); public void undo ();
}

RemoteControl class
public class RemoteControl { Command[] onCommands; Command[] offCommands; Command undoCommand; public RemoteControl() {
onCommands = new Command[7]; offCommands = new Command[7];
Command noCommand = new NoCommand(); for (int i = 0; i < 7; i++) {
onCommands[i] = noCommand; offCommands[i] = noCommand;
}
undoCommand = noCommand;
}
public void setCommand(int slot, Command onCommand, Command offCommand) { onCommands[slot] = onCommand;
offCommands[slot] = offCommand;
}
public void onButtonWasPushed(int slot) { onCommands[slot].execute(); undoCommand = onCommands[slot];
}
public void offButtonWasPushed(int slot) { offCommands[slot].execute(); undoCommand = onCommands[slot];
}
public void undoButtonWasPushed ( ) { undoCommand.undo ( );
}
}

RemoteContoleTest class
class RemoteControlTest
{
public static void main(String[] args)
{
RemoteControl remote =new RemoteControl(); CeilingFan CeilingFan = new CeilingFan("center");
 remote.setCommand(0, new CeilingFanHighCommand(CeilingFan), new CeilingFanHighCommand(CeilingFan));
remote.onButtonWasPushed(0); remote.offButtonWasPushed(0); remote.undoButtonWasPushed();
}
}


Output :
center ceiling fan is on high center ceiling fan is on high center ceiling fan is off







Q.7 Write a Java Program to implement Adapter pattern for Enumeration iterator.

import java.util.Enumeration; import java.util.Vector;

public class EnumProduct
{
private Vector product;

public EnumProduct(){
product = new Vector(); setProduct("ProductA"); setProduct("ProductB"); setProduct("ProductC");
}

public void setProduct(String s){ product.add(s);
}

public Enumeration getProduct(){
Enumeration eProduct = product.elements(); return eProduct;
}
}


import java.util.Iterator; import java.util.Enumeration;
public class EnumToIteratorAdapter implements Iterator
{
Enumeration enumA;

public EnumToIteratorAdapter(Enumeration e){ enumA = e;
}

public boolean hasNext(){
return enumA.hasMoreElements();
}

public Object next(){
return enumA.nextElement();
}

public void remove(){
throw new UnsupportedOperationException();
}
}


Import java.util.Enumeration;
 import java.util.Vector; import java.util.Iterator;

public class Product
{
public void displayProduct(Iterator iterator){ for (; iterator.hasNext();)
System.out.println(iterator.next());
}

public static void main(String[] args) { Product product = new Product();
EnumProduct enumProduct = new EnumProduct(); EnumToIteratorAdapter enumToIteratorAdapter = new
EnumToIteratorAdapter(enumProduct.getProduct()); product.displayProduct(enumToIteratorAdapter);
}


}

Output:
ProductA ProductB ProductC








Q.8 Write a Java Program to implement Iterator Pattern for Designing Menu like Breakfast,Lunch or Dinner Menu.

public interface Iterator { boolean hasNext(); Object next();
}


import java.util.Iterator;

public interface Menu {

public Iterator<?> createIterator(); public static final String name = ""; public String getName();

}

import java.util.Iterator;
public class DinerMenu implements Menu { static final int MAX_ITEMS = 6; int numberOfItems = 0;
MenuItem[] menuItems; String name;

public DinerMenu() {
name="LUNCH";
menuItems = new MenuItem[MAX_ITEMS];
2.99);


}

addItem("Vegetarian BLT",
"(Fakin') Bacon with lettuce & tomato on whole wheat", true,

addItem("BLT",
       "Bacon with lettuce & tomato on whole wheat", false, 2.99); addItem("Soup of the day",
       "Soup of the day, with a side of potato salad", false, 3.29); addItem("Hotdog",
"A hot dog, with saurkraut, relish, onions, topped with cheese",
false, 3.05);
addItem("Steamed Veggies and Brown Rice",
       "Steamed vegetables over brown rice", true, 3.99); addItem("Pasta",
"Spaghetti with Marinara Sauce, and a slice of sourdough bread",
true, 3.89);


public void addItem(String name, String description,
boolean vegetarian, double price)
{
MenuItem menuItem = new MenuItem(name, description, vegetarian, price);
if (numberOfItems >= MAX_ITEMS) {


   menu");
System.err.println("Sorry, menu is full! Can't add item to

} 
else {
menuItems[numberOfItems] = menuItem; numberOfItems = numberOfItems + 1;

}
}

public MenuItem[] getMenuItems() {
return menuItems;
}

public Iterator<MenuItem> createIterator() {
return new DinerMenuIterator(menuItems);
}

@Override
public String getName() {
// TODO Auto-generated method stub
return name;
}

// other menu methods here
}


import java.util.Iterator;
public class DinerMenuIterator implements Iterator { MenuItem[] list;
int position = 0;

public DinerMenuIterator(MenuItem[] list) {
this.list = list;
}
public MenuItem next()
{
MenuItem menuItem=list[position]; position=position+1;
return menuItem;
}

public boolean hasNext() {
if (position >= list.length || list[position] == null) {
return false;
} else {
return true;
}
}
public void remove()
{
if(position <=0) {
                      throw new IllegalStateException("You can't remove an item until you have done least one next()");

}
if(list[position-1]!=null) {
for(int i=position-1;i < (list.length-1);i++) { list[i]=list[i+1];
}
list[list.length-1]=null;
}
}
}



import java.util.ArrayList;

public class Main {

public static void main(String[] args) {

//DinerMenuIterator d=new DinerMenuIterator(MenuItem[] ); PancakeHouseMenu pancakeHouseMenu=new PancakeHouseMenu(); DinerMenu dinerMenu = new DinerMenu();
// MenuItem[] lunchItems = dinerMenu.getMenuItems(); ArrayList<Menu> menus=new ArrayList<Menu>(); menus.add(pancakeHouseMenu);
menus.add(dinerMenu);
Waitress waitress=new Waitress(menus); waitress.printMenu();
}

}


public class MenuItem { String name; String description; boolean vegetarian; double price;

public MenuItem(String name,
String description, boolean vegetarian, double price)
{
this.name = name; this.description = description; this.vegetarian = vegetarian; this.price = price;
}

public String getName() {
return name;
}

public String getDescription() {
return description;
}

public double getPrice() {
return price;
}

public boolean isVegetarian() {
return vegetarian;
}
public String toString() {
return (name + ", $" + price + "\n	" + description);
}
}

import java.util.ArrayList; import java.util.Iterator;
public class PancakeHouseMenu implements Menu { ArrayList menuItems;
String name;

public PancakeHouseMenu() { name="BREAKFAST";
menuItems = new ArrayList();

addItem("K & B's Pancake Breakfast",
"Pancakes with scrambled eggs, and toast", true,
2.99);

addItem("Regular Pancake Breakfast", "Pancakes with fried eggs, sausage", false,
2.99);

addItem("Blueberry Pancakes",
"Pancakes made with fresh blueberries", true,
3.49);

addItem("Waffles",
"Waffles, with your choice of blueberries or strawberries", true,
3.59);
}

public void addItem(String name, String description,

boolean vegetarian, double price)
{
MenuItem menuItem = new MenuItem(name, description, vegetarian, price); menuItems.add(menuItem);
}

public ArrayList<MenuItem> getMenuItems() { return menuItems;
}

public Iterator<MenuItem> createIterator() { return menuItems.iterator();
}

public String toString() {
return "Objectville Pancake House Menu";
}
public String getName() { return name;}

// other menu methods here
}


import java.util.ArrayList;

public class PancakeHouseMenuIterator implements Iterator { ArrayList items;
int position = 0;

public PancakeHouseMenuIterator(ArrayList items) {
this.items = items;
}

public Object next() {
Object object = items.get(position); position = position + 1;
return object;
}

public boolean hasNext() {
if (position >= items.size()) {
return false;
} else {
return true;
}
}

public ArrayList getMenuItems() {
// TODO Auto-generated method stub
return null;


}}

public Waitress(ArrayList<Menu> menus) { this.menus=menus;
}

public void printMenu() {
Iterator <?> menuIterator=menus.iterator(); System.out.println("MENU\n	\n\n");

while(menuIterator.hasNext())
{
Menu menu=(Menu)menuIterator.next(); System.out.println("\n"+menu.getName()+"\n"); printMenu(menu.createIterator());

}

}

void printMenu(Iterator<?> iterator) { while (iterator.hasNext()) {
MenuItem menuItem = (MenuItem)iterator.next(); System.out.print(menuItem.getName() + ", "); System.out.print(menuItem.getPrice() + " -- "); System.out.println(menuItem.getDescription());
}
}

}


Output :
MENU

BREAKFAST

K & B's Pancake Breakfast, 2.99 -- Pancakes with scrambled eggs, and toast Regular Pancake Breakfast, 2.99 -- Pancakes with fried eggs, sausage Blueberry Pancakes, 3.49 -- Pancakes made with fresh blueberries
Waffles, 3.59 -- Waffles, with your choice of blueberries or strawberries

LUNCH

Vegetarian BLT, 2.99 -- (Fakin') Bacon with lettuce & tomato on whole wheat BLT, 2.99 -- Bacon with lettuce & tomato on whole wheat
Soup of the day, 3.29 -- Soup of the day, with a side of potato salad Hotdog, 3.05 -- A hot dog, with saurkraut, relish, onions, topped with cheese Steamed Veggies and Brown Rice, 3.99 -- Steamed vegetables over brown rice Pasta, 3.89 -- Spaghetti with Marinara Sauce, and a slice of sourdough bread





Q.9 Write a Java Program to implement State Pattern for Gumball Machine. Create instance variable that holds current state from there, we just need to handle all actions, behaviors and state transition that can happen

1) Create Interface-
State.java
package javaprograms; public interface State {
public void insertQuarter(); public void ejectQuarter(); public void turnCrank(); public void dispense();

public void refill();
}

2) Create Class SoldState.java
package javaprograms;

public class SoldState implements State { GumballMachine gumballMachine;
public SoldState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine;
}

public void insertQuarter() {
System.out.println("Please wait, we're already giving you a
gumball");
}

public void ejectQuarter() {
System.out.println("Sorry, you already turned the crank");
}

public void turnCrank() {
System.out.println("Turning twice doesn't get you another
gumball!");
}

public void dispense() { gumballMachine.releaseBall();
if (gumballMachine.getCount() > 0) {

gumballMachine.setState(gumballMachine.getNoQuarterState());
}
 else {
System.out.println("Oops, out of gumballs!"); gumballMachine.setState(gumballMachine.getSoldOutState());
}
}
                   public void refill() { }

public String toString() {
return "dispensing a gumball";
}
}

SoldOutState.java
package javaprograms;


public class SoldOutState implements State { GumballMachine gumballMachine;

public SoldOutState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine;
}

public void insertQuarter() {
System.out.println("You can't insert a quarter, the machine is
sold out");
}

public void ejectQuarter() {
              System.out.println("You can't eject, you haven't inserted a quarter yet");
}

public void turnCrank() {
System.out.println("You turned, but there are no gumballs");
}

public void dispense() {
System.out.println("No gumball dispensed");
}

public void refill() { gumballMachine.setState(gumballMachine.getNoQuarterState());
}

public String toString() { return "sold out";
}
}

NoQuarterState.java

package javaprograms;

public class NoQuarterState implements State { GumballMachine gumballMachine;

public NoQuarterState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine;
}


                   public void insertQuarter() { System.out.println("You inserted a quarter");
gumballMachine.setState(gumballMachine.getHasQuarterState());
}

public void ejectQuarter() {
System.out.println("You haven't inserted a quarter");
}

public void turnCrank() {
System.out.println("You turned, but there's no quarter");
}

public void dispense() {
System.out.println("You need to pay first");
}
public void refill() { } public String toString() {
return "waiting for quarter";
}
}


HasQuarterState.java
 package javaprograms;


public class HasQuarterState implements State { GumballMachine gumballMachine;

public HasQuarterState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine;
}

public void insertQuarter() {
System.out.println("You can't insert another quarter");
}

public void ejectQuarter() { System.out.println("Quarter returned");


gumballMachine.setState(gumballMachine.getNoQuarterState());
}

public void turnCrank() { System.out.println("You turned...");
gumballMachine.setState(gumballMachine.getSoldState());
}

public void dispense() {
System.out.println("No gumball dispensed");
}
public void refill() { } public String toString() {
return "waiting for turn of crank";
}
}


GumballMachine.java package javaprograms;


public class GumballMachine {

State soldOutState; 
State noQuarterState; 
State hasQuarterState;
 State soldState;
State state; int count = 0;

public GumballMachine(int numberGumballs) { soldOutState = new SoldOutState(this); 
noQuarterState = new NoQuarterState(this); hasQuarterState = new HasQuarterState(this); 
soldState = new SoldState(this);
this.count = numberGumballs;
 if (numberGumballs > 0) {
state = noQuarterState;
} else {
state = soldOutState;
}
}

public void insertQuarter() { state.insertQuarter();
}



public void ejectQuarter() { state.ejectQuarter();
}

public void turnCrank() { state.turnCrank(); state.dispense();
}

void releaseBall() {
System.out.println("A gumball comes rolling out the slot..."); if (count > 0) {
count = count - 1;
}
}

int getCount() {
return count;
}

void refill(int count) { this.count += count;
              System.out.println("The gumball machine was just refilled; its new count is: " + this.count);
state.refill();
}

void setState(State state) { this.state = state;
}
public State getState() { return state;
}

public State getSoldOutState() { return soldOutState;
}

public State getNoQuarterState() { return noQuarterState;
}

public State getHasQuarterState() { return hasQuarterState;
}

public State getSoldState() { return soldState;
}


public String toString() {
StringBuffer result = new StringBuffer(); result.append("\nMighty Gumball, Inc."); result.append("\nJava-enabled Standing Gumball Model #2004"); result.append("\nInventory: " + count + " gumball");
if (count != 1) {
result.append("s");
}
result.append("\n");
result.append("Machine is " + state + "\n"); return result.toString();
}
}

GumballMachineTestDrive.java
 package javaprograms;

public class GumballMachineTestDrive {

public static void main(String[] args) {
GumballMachine gumballMachine = new GumballMachine(2);

System.out.println(gumballMachine);

gumballMachine.insertQuarter(); gumballMachine.turnCrank();

System.out.println(gumballMachine);

gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank();

gumballMachine.refill(5); gumballMachine.insertQuarter(); gumballMachine.turnCrank();

System.out.println(gumballMachine);
}
}

Output-
Mighty Gumball, Inc.
Java-enabled Standing Gumball Model #2004 Inventory: 2 gumballs
Machine is waiting for quarter You inserted a quarter
You turned...
A gumball comes rolling out the slot...

Mighty Gumball, Inc.
Java-enabled Standing Gumball Model #2004 Inventory: 1 gumball
Machine is waiting for quarter

You inserted a quarter You turned...
A gumball comes rolling out the slot... Oops, out of gumballs!
You can't insert a quarter, the machine is sold out You turned, but there are no gumballs
No gumball dispensed
The gumball machine was just refilled; its new count is: 5 You inserted a quarter
You turned...
A gumball comes rolling out the slot...

Mighty Gumball, Inc.
Java-enabled Standing Gumball Model #2004 Inventory: 4 gumballs
Machine is waiting for quarter






 Q.10 Write a java program to implement an adapter design pattern in mobile charger. Define two classes Volt (to measure volts) and Socket (producing constant volts of 120v). Build an adapter that can produce 3 volts, 12 volts and default 120 volts. Implement adapter pattern using class adapter.

AdapterPatternTest class
package Adapter;

public class AdapterPatternTest {

public static void main(String[] args) {

testClassAdapter(); testObjectAdapter();
}

private static void testObjectAdapter() {
SocketAdapter sockAdapter = new SocketObjectAdapterImpl(); Volt v3 = getVolt(sockAdapter,3);
Volt v12 = getVolt(sockAdapter,12); Volt v120 = getVolt(sockAdapter,120);
System.out.println("v3 volts using Object Adapter="+v3.getVolts()); System.out.println("v12 volts using Object Adapter="+v12.getVolts()); System.out.println("v120 volts using Object Adapter="+v120.getVolts());
}

private static void testClassAdapter() {
SocketAdapter sockAdapter = new SocketClassAdapterImpl(); Volt v3 = getVolt(sockAdapter,3);
Volt v12 = getVolt(sockAdapter,12); Volt v120 = getVolt(sockAdapter,120);
System.out.println("v3 volts using Class Adapter="+v3.getVolts()); System.out.println("v12 volts using Class Adapter="+v12.getVolts()); System.out.println("v120 volts using Class Adapter="+v120.getVolts());
}

private static Volt getVolt(SocketAdapter sockAdapter, int i) { switch (i){
case 3: return sockAdapter.get3Volt(); case 12: return sockAdapter.get12Volt();
case 120: return sockAdapter.get120Volt(); default: return sockAdapter.get120Volt();
}  }   }
Socket class package Adapter; public class Socket {

public Volt getVolt(){
return new Volt(120);
}
}
SocketAdapter interface
package Adapter;

public interface SocketAdapter { public Volt get120Volt(); public Volt get12Volt();
public Volt get3Volt();
}
SocketClassAdapterImpl class
package Adapter;
public class SocketClassAdapterImpl extends Socket implements SocketAdapter{ @Override
public Volt get120Volt() { return getVolt();
}

@Override
public Volt get12Volt() { Volt v= getVolt();
return convertVolt(v,10);
}

@Override
public Volt get3Volt() {
Volt v= getVolt();
return convertVolt(v,40);
}

private Volt convertVolt(Volt v, int i) { return new Volt(v.getVolts()/i);
}

}
SocketObjectAdapterImpl class
package Adapter;

public class SocketObjectAdapterImpl implements SocketAdapter{

//Using Composition for adapter pattern private Socket sock = new Socket();

@Override
public Volt get120Volt() { return sock.getVolt();
}
               @Override
public Volt get12Volt() {
Volt v= sock.getVolt(); return convertVolt(v,10);
}

@Override
public Volt get3Volt() {
Volt v= sock.getVolt(); return convertVolt(v,40);
}

private Volt convertVolt(Volt v, int i) { return new Volt(v.getVolts()/i);
}
}
Volt class
package Adapter; public class Volt {
private int volts;

public Volt(int v){
this.volts=v;
}

public int getVolts() {
return volts;
}

public void setVolts(int volts) { this.volts = volts;
}

  Output:
v3 volts using Class Adapter=3 v12 volts using Class Adapter=12
v120 volts using Class Adapter=120 v3 volts using Object Adapter=3 v12 volts using Object Adapter=12
v120 volts using Object Adapter=120


Q.11 Write a java program to implement Adapter pattern to design Heart Model to Beat Model.

Q.12 Design simple HR Application using Spring Framework.







                                MACHINE LEARNING

Q.1 Write a Python program to prepare Scatter Plot for Iris Dataset

import pandas as pd
import matplotlib.pyplot as plt 
iris=pd.read_csv("Iris.csv")
iris.plot(kind="scatter",x='SepalLengthCm',y='PetalLengthCm') 
plt.grid()
plt.show()


Q.2 Write a python program to find all null values in a given dataset & remove them.

# importing pandas as pd 
import pandas as pd
# importing numpy as np import numpy as np
# dictionary of lists

dict = {'First Score':[100, 90, np.nan, 95], 'Second Score': [30, 45, 56, np.nan],
         'Third Score':[np.nan, 40, 80, 98]} # creating a dataframe from list
df = pd.DataFrame(dict)
# using isnull() function print("\n isnull() function "); 
print(df.isnull())
# filling missing value using fillna()
print("\n After filling null values with 0"); print(df.fillna(0))

Output-
isnull() function
First Score Second Score Third Score
0 False	False	True
1 False	False	False
2 True	False	False
3 False	True	False

After filling null values with 0
First Score Second Score Third Score
 0	100.0	        30.0          0.0
 1	90.0	45.0	40.0
 2	0.0	56.0	80.0
 3	95.0	0.0	98.0

 



Q.3 Write a python program to make Categ orical values in numeric format for a given dataset.

#import pandas
import pandas as pd
# read csv file
df = pd.read_csv('Customers.csv')
print(df)
print("\n After repalcing Category Male as 0 and Female as 1"); 
# replacing values
df['GENDER'].replace(['Male', 'Female'],[0, 1], inplace=True)
print(df)

Output:
Name Episodes Gender
0 Sheldon	42	male
1 Penny	24 female
2 Amy	31 female
3 Penny	29 female
4 Raj	37	male
5 Sheldon	40	male

Name Episodes Gender female male


0 Sheldon	42	male	0	1
1 Penny	24  female	1	0
2 Amy	31  female	1	0
3 Penny	29  female	1	0
4 Raj	  37	 male	   0	   1
5 Sheldon     40    male	0	1




Q.4 Write python program to implement simple linear regression for predicting house price.

import pandas as pd import numpy as np
import matplotlib.pyplot as plt import seaborn as sns

#sns.set_style("whitegrid") #plt.style.use("fivethirtyeight")

USAhousing = pd.read_csv('USA_Housing.csv') USAhousing.head()

X = USAhousing[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms','Avg. Area Number of Bedrooms', 'Area Population']] 
y = USAhousing['Price']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)
from sklearn.linear_model import LinearRegression

lin_reg = LinearRegression(normalize=True) lin_reg.fit(X_train,y_train)

pred = lin_reg.predict(X_test) plt.scatter(y_test, pred) plt.show()




Q.5 Write a python program to implement Multiple Linear Regression for given dataset.
import matplotlib.pyplot as plt import pandas as pd
import numpy as np import pylab as pl


df = pd.read_csv('Fuelconsumption.csv')
 df.head()
cdf=
df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_CITY','FUELCONSUMPTION_HWY','FUELCO NSUMPTION_COMB','CO2EMISSIONS']]
cdf.head() 

plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS, color='blue') plt.xlabel('Engine Size')
plt.ylabel('Emissions') plt.show()

msk = np.random.rand(len(df)) < 0.8 
train = cdf[msk]
test = cdf[~msk]

from sklearn import linear_model
regr = linear_model.LinearRegression()
x = np.asanyarray(train[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB']])
y = np.asanyarray(train[['CO2EMISSIONS']]) regr.fit(x,y)

print('Coefficients: ',  regr.coef_)




Q.6 Write a python program to implement Polynomial Regression for given dataset.

Import numpy as np
import  matplotlib.pyplot as plt import pandas as pd

dataset = pd.read_csv('position_salaries.csv') dataset

X = dataset.iloc[:,1:2].values 
y = dataset.iloc[:,2].values

# fitting the linear regression model
from sklearn.linear_model import LinearRegression lin_reg = LinearRegression()
lin_reg.fit(X,y)

# visualising the linear regression model plt.scatter(X,y, color='red')
plt.plot(X, lin_reg.predict(X),color='blue') plt.title("Truth or Bluff(Linear)") 
plt.xlabel('Position  level')
 plt.ylabel('Salary')
plt.show()

  # polynomial regression model
from sklearn. preprocessing import PolynomialFeatures 
poly_reg = PolynomialFeatures(degree=2)
X_poly = poly_reg.fit_transform(X) 
X_poly	# prints X_poly
lin_reg2 = LinearRegression() lin_reg2.fit(X_poly,y)


# visualising polynomial regression
from sklearn.preprocessing import PolynomialFeatures poly_reg = PolynomialFeatures(degree=4)
X_poly = poly_reg.fit_transform(X)
 lin_reg2 = LinearRegression() lin_reg2.fit(X_poly,y)

X_grid = np.arange(min(X),max(X),0.1)

X_grid = X_grid.reshape(len(X_grid),1) plt.scatter(X,y, color='red')
plt.plot(X_grid, lin_reg2.predict(poly_reg.fit_transform(X_grid)),color='blue')
plt.title("Truth or Bluff(Polynomial)")
plt.xlabel('Position level')
plt.ylabel('Salary') 
plt.show()

Output





Q.7 Write a python program to Implement Naïve Bayes.

from sklearn import datasets from sklearn import metrics
from sklearn.naive_bayes import GaussianNB
 dataset = datasets.load_iris()
#Creating our Naive Bayes Model
 model = GaussianNB()
model.fit(dataset.data, dataset.target)


#Making Predictions expected = dataset.target
predicted = model.predict(dataset.data)

#Getting Accuracy and Statistics print(metrics.classification_report(expected, predicted)) print(metrics.confusion_matrix(expected, predicted))




Q.8. Write a python program to implement Decision Tree whether or not to play Tennis. 

# Write a python program to Implement Decision Tree whether or not to play tennis.
import numpy as np import pandas as pd
import matplotlib.pyplot as plt
	
PlayTennis = pd.read_csv("PlayTennis.csv")

#We can convert all the non numerical values into numerical values using LabelEncoder

from sklearn.preprocessing import LabelEncoder 
Le = LabelEncoder()

PlayTennis['outlook'] = Le.fit_transform(PlayTennis['outlook'])
 PlayTennis['temp'] = Le.fit_transform(PlayTennis['temp']) 
PlayTennis['humidity'] = Le.fit_transform(PlayTennis['humidity'])
 PlayTennis['windy'] = Le.fit_transform(PlayTennis['windy']) 
PlayTennis['play'] = Le.fit_transform(PlayTennis['play'])

#Lets split the training data and its coresponding prediction values.

   #y - holds all the decisions.
    #X - holds the training data.
y = PlayTennis['play']
X = PlayTennis.drop(['play'],axis=1)

# Fitting the model
from sklearn import tree
clf = tree.DecisionTreeClassifier(criterion = 'entropy')
 #A decision tree classifier. “entropy” for the information gain.
clf = clf.fit(X, y)	
#Decision tree algorithm splits nodes as long as this value decreases till it reaches zero
  # We can visualize the tree using tree.plot_tree   tree.plot_tree(clf)
plt.show()




Q.9Write a python program to implement Linear SVM.

# Import the Libraries import numpy as np
import matplotlib.pyplot as plt from sklearn import svm, datasets

# Import some Data from the iris Data Set iris = datasets.load_iris()

# Take only the first two features of Data.
# To avoid the slicing, Two-Dim Dataset can be used X = iris.data[:, :2]
y = iris.target
# C is the SVM regularization parameter C = 1.0

# Create an Instance of SVM and Fit out the data.
# Data is not scaled so as to be able to plot the support vectors
svc = svm.SVC(kernel ='linear', C = 1).fit(X, y)
 #Fit the SVM model according to the given training data.
  #SVC=Support Vector Classifier
  # create a mesh to plot
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1 h = (x_max / x_min)/100
xx, yy = np.meshgrid(np.arange(x_min, x_max, h),	

#Return coordinate matrices from coordinate vectors.
 np.arange(y_min, y_max, h))

# Plot the data for Proper Visual Representation plt.subplot(1, 1, 1) 
#Add a subplot to the current figure.subplot(nrows,ncols, indexOfSubplot)

# Predict the result by giving Data to the model
Z = svc.predict(np.c_[xx.ravel(), yy.ravel()])	
#ravel()-Return a  contiguous flattened array.
Z = Z.reshape(xx.shape)
plt.contourf(xx, yy, Z, cmap = plt.cm.Paired, alpha = 0.8) 
#contour  and contourf draw contour lines and filled contours.

plt.scatter(X[:, 0], X[:, 1], c = y, cmap = plt.cm.Paired) plt.xlabel('Sepal length')
plt.ylabel('Sepal width') plt.xlim(xx.min(), xx.max()) plt.title('SVC with linear kernel')

# Output the Plot plt.show()





Q.10 Write a python program to  find Decision boundary by using a neural network with 10.

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

# Generate synthetic data
np.random.seed(0)
X = np.random.rand(100, 2) * 2 - 1  # 100 data points in a 2D space
Y = np.logical_xor(X[:, 0] > 0, X[:, 1] > 0)  # XOR problem

# Define the neural network model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(10, activation='relu', input_shape=(2,)),
    tf.keras.layers.Dense(1, activation='sigmoid')])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X, Y, epochs=1000, verbose=0)

# Evaluate the model
loss, accuracy = model.evaluate(X, Y)
print(f"Final loss: {loss}, Final accuracy: {accuracy}")

# Decision boundary visualization
x_min, x_max = X[:, 0].min() - 0.1, X[:, 0].max() + 0.1
y_min, y_max = X[:, 1].min() - 0.1, X[:, 1].max() + 0.1
xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))
Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

plt.contourf(xx, yy, Z, levels=[0, 0.5, 1], cmap=plt.cm.RdBu, alpha=0.6)
plt.scatter(X[:, 0], X[:, 1], c=Y, cmap=plt.cm.RdBu, edgecolors='k')
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.title("Decision Boundary")
plt.show()





Q.11 Write a python program to transform data with principal component analysis.

import numpy as np
from sklearn.decomposition import PCA

# Sample data
data = np.array([[1, 2, 3, 4],
                 [4, 3, 2, 1],
                 [2, 2, 2, 2],
                 [5, 5, 5, 5]])

# Initialize the PCA model with the number of components you want
num_components = 2
pca = PCA(n_components=num_components)

# Fit the PCA model to your data and transform the data
transformed_data = pca.fit_transform(data)

# Principal components (eigenvectors)
principal_components = pca.components_

# Variance explained by each component
explained_variance = pca.explained_variance_ratio_

# Printing the results
print("Original Data:")
print(data)
print("\nTransformed Data (2 Principal Components):")
print(transformed_data)
print("\nPrincipal Components (Eigenvectors):")
print(principal_components)
print("\nVariance Explained by Each Component:")
print(explained_variance)






Q.12  Write a python program to implement  k-nearest neighbors ML algorithm to build prediction model (Use forge dataset).

# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.datasets import make_blobs

# Create the forge dataset
X, y = make_blobs(n_samples=100, centers=2, random_state=0, cluster_std=1.0)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

# Create a KNN classifier with a specified number of neighbors (k)
k = 3
knn = KNeighborsClassifier(n_neighbors=k)

# Fit the classifier to the training data
knn.fit(X_train, y_train)

# Make predictions on the test data
y_pred = knn.predict(X_test)

# Evaluate the accuracy of the KNN model
accuracy = knn.score(X_test, y_test)
print("Accuracy of KNN with k={} neighbors: {:.2f}".format(k, accuracy))

# Visualize the decision boundary
plt.scatter(X[:, 0], X[:, 1], c=y, s=30, cmap=plt.cm.Paired)
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")

# Plot the decision boundary
xx, yy = np.meshgrid(np.linspace(X[:, 0].min() - 1, X[:, 0].max() + 1, 100),                   
  np.linspace(X[:, 1].min() - 1, X[:, 1].max() + 1, 100))
Z = knn.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)
plt.contourf(xx, yy, Z, alpha=0.4, cmap=plt.cm.Paired)
plt.title("KNN Decision Boundary")
plt.show() 





 
Q.13 Write a python program to implement k-means algorithm on a synthetic dataset.

pip install numpy scikit-learn

import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Generate a synthetic dataset
np.random.seed(0)
X = np.concatenate([np.random.normal(0, 1, (100, 2)), np.random.normal(5, 1, (100, 2))])
y = np.array([0] * 100 + [1] * 100)

# Visualize the synthetic dataset
plt.scatter(X[:, 0], X[:, 1], c=y)
plt.title("Synthetic Dataset")
plt.show()

# Perform K-means clustering
k = 2  # Number of clusters
kmeans = KMeans(n_clusters=k, random_state=0)
kmeans.fit(X)

# Get cluster centers and labels
cluster_centers = kmeans.cluster_centers_
cluster_labels = kmeans.labels_

# Visualize the clusters
plt.scatter(X[:, 0], X[:, 1], c=cluster_labels, cmap='rainbow')
plt.scatter(cluster_centers[:, 0], cluster_centers[:, 1], s=200, c='black', label='Cluster Centers')
plt.title("K-means Clustering")
plt.legend()
plt.show()






Q.14 Write a python program to implement agglomerative clustering on a synthetic dataset. 

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import AgglomerativeClustering

# Generate a synthetic dataset
data, labels = make_blobs(n_samples=300, centers=3, random_state=42)

# Create an Agglomerative Clustering model
agg_clustering = AgglomerativeClustering(n_clusters=3)

# Fit the model to the data
agg_clustering.fit(data)

# Get cluster assignments for each data point
cluster_labels = agg_clustering.labels_

# Visualize the clusters
plt.scatter(data[:, 0], data[:, 1], c=cluster_labels, cmap='viridis')
plt.title("Agglomerative Clustering")
plt.show()



                                                       WEB FRAMEWORK

Q.1 Create an HTML form that contain the Student Registration details and write a JavaScript to validate Student first and last name as it should not contain other than alphabets and age should be between 18 to 50.
<!DOCTYPE html>
<html>
<head>
<title>Student Registration</title>
</head>
<body>
<script type="text/javascript"> function validation() {
var name = document.frm.name.value; var lname = document.frm.lname.value; var mobile = document.frm.mob.value; var address = document.frm.add.value; var city = document.frm.city.value;
var age = document.frm.age.value;
if (name != "" && lname != "" && mobile != "" && address != "" && city != "" && age
!= "") {
if (!name.match(/^[a-z A-Z]+$/)) { alert("Invalid name fields");
} else if (!lname.match(/^[a-z A-Z]+$/)) { alert("Invalid last name fields");
} else if (!mobile.match(/^\d{10}$/)) { alert("Invalid mobile no fields");
}else if(age>=18 && age<=50) { alert("Submit succesfully	");
} else {
alert("Age not between 18 to 50")
}
}
else {
alert("Invalid fields");
}
}
</script>
<center>
<h1>Student Registration Form</h1>
<form name="frm">
<table>
<tr>
<td>Name: </td>
<td><input type="text" name="name"></td>

</tr>
<tr>
<td>Last Name: </td>
<td><input type="text" name="lname"></td>
</tr>
<tr>
<td>Mobile No: </td>
<td><input type="text" name="mob"></td>
</tr>
<tr>
<td>Address: </td>
<td><input type="text" name="add"></td>
</tr>
<tr>
<td>City: </td>
<td><input type="text" name="city"></td>
</tr>
<tr>
<td>Age: </td>
<td><input type="text" name="age"></td>
</tr>
</table><br>
<input type="button" name="b1" onclick="validation()" value="Submit">
<input type="reset" name="b2">
</form>
</center>
</body>
</html>

Output:



Q.2 Create an HTML form that contain the Employee Registration details and write a JavaScript to validate DOB, Joining Date, and Salary.
<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial- scale=1.0">
<title>Employee Details</title>

</head>

<body>
<center>
<h1>Employee Registration Form</h1>
<form name="frm">
<table>
        <tr>
           <td>Employee Name: </td>
           <td><input type="text" name="name"></td>
        </tr>

        <tr>
           <td>Employee Address: </td>
           <td><input type="text" name="Address"></td>
        </tr>

        <tr>
           <td>Employee Contact Number: </td>
           <td><input type="text" name="Telephone"></td>
        </tr>

        <tr>
           <td>Employee Contact Number: </td>
           <td><input type="text" name="Telephone"></td>
        </tr>

        <tr>
           <td>Employee Birthdate: </td>
          <td><input type="text" name="bdate"            placeholder="dd/mm/yyyy"></td>
       </tr>
       <tr>
           <td>Joining Date: </td>
          <td><input type="text" name="jdate" placeholder="dd/mm/yyyy"></td>
     </tr>
    <tr>
       <td>Salary: </td>
       <td><input type="text" name="salary" ></td>
    </tr>

   </table><br>

<input type="button" name="b1" onclick="validate()" value="Submit">
 <input type="reset" name="b2">
 </form>
 </center>

<script>
function validate() {
var bdate = document.frm.bdate.value; var jdate = document.frm.jdate.value; var salary = document.frm.salary.value;
let date = /^(0?[1-9]|[12][0-9]|3[01])[\/\-](0?[1-9]|1[012])[\/\-
]\d{4}$/;
if (bdate != "" && jdate != "" && salary != "") {

if (isNaN(salary)) {
alert("Enter only digit please");
} else	if(bdate.search(date) == -1){ alert("Employee Birth Date is Invalid");
}
else if(jdate.search(date) == -1){ alert("Employee Join Date is Invalid");
}else
{
alert("Submit succesfully.	");
}
}
else {
alert("Invalid fields");
}
}

 </script>
</body>
</html>                      

Output: 





Q.3Create an HTML form for Login and write a JavaScript to validate email ID using Regular Expression.

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Login Page</title>
</head>
<body>
<center>
<h1>Login Form</h1>
<form name="frm">
<table>
<tr>
<td>User Name</td>
<td><input type="text" name="Email"></td></tr>

<tr>
<td>Password </td>
<td><input type="text" name="password"></td>
</tr>
</table><br>

<input type="button" name="b1" onclick="validate()" value="Submit">
<input type="reset" name="b2">
</form>
</center>

<script>
function validate() {
var email = document.frm.Email.value;
var password = document.frm.password.value;
var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/; if (email != "" && password != "") {
if (!email.match(filter)) { alert("Invalid email fields");
} else if (password.length < 6 || password.length > 8) { alert("Password min and max length is 6.");

}
else {
alert("Thank you for Login")
}
}
else {
alert("Invalid fields");
}
}
  </script>
</body>
</html>


Output:






Q.4 Create nodejs file that will convert the output ‘Hello World!’ into uppercase letters.

//WRONG PROGRAM 
var http= require('http');
var uc=require('upper-case');
http.createServer(function(req,res){
res.writeHead(200,{'Content-type':'text/html'}); 
res.write(uc.upperCase("Hello World")); 
res.end();
}).listen(8080);


//CORRECT PROGRAM....Plz run this program and go to on browser and type localhost:3000 
const http = require('http');

const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/html' });
  res.write('Hello World!'.toUpperCase());
  res.end();
}).listen(3000);

 Output-
HELLO WORLD



Q.5 Using nodejs create a web page to read two file names from user and append contents of first file into second file.
const fs = require('fs');
  // open destination file for appending
var write = fs.createWriteStream("message.txt", {flags: 'a'});
// open source file for reading
var read = fs.createReadStream("input.txt"); write.on('close', function() {
console.log("done writing");
});
read.pipe(write);




Q.6Create a Nodejs file that opens the requested file and returns the content to the client . If anything goes wrong throw 404 error.

Fileprogram.js
var http = require('http'); var url = require('url'); var fs = require('fs');

http.createServer(function (req, res) { var q = url.parse(req.url, true);
var filename = "." + q.pathname; fs.readFile(filename, function(err, data) {
if (err) {
res.writeHead(404, {'Content-Type': 'text/html'}); return res.end("404 Not Found");
}
res.writeHead(200, {'Content-Type': 'text/html'}); res.write(data);
return res.end();
});
}).listen(8080);

summer.html
<!DOCTYPE html>
<body>
<h1>Summer</h1>
   <p>I love the sun!</p>
</body>
</html>

winter.html
<!DOCTYPE html>
<body>
<h1>Winter</h1>
<p>I love the snow!</p>  </body> </html>



Q.7 Create Nodejs file that write an HTML form with an upload fields.

var http = require('http');
var formidable = require('formidable');
  http.createServer(function (req, res) { if (req.url == '/fileupload')

 {
var form = new formidable.IncomingForm(); form.parse(req, function (err, fields, files) {
res.write('File uploaded'); res.end();
});
} else {
res.writeHead(200, {'Content-Type': 'text/html'}); res.write('<form action="fileupload" method="post"
             enctype="multipart/form-data">');
res.write('<input type="file" name="filetoupload"><br>'); res.write('<input type="submit">');
res.write('</form>'); return res.end();
}
}).listen(8080);


//OR

const fs = require('fs');

const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <title>File Upload Form</title>
</head>
<body>
    <h1>File Upload Form</h1>
    <form action="/upload" method="post" enctype="multipart/form-data">
        <input type="file" name="file" id="file" />
        <input type="submit" value="Upload" />
    </form>
</body>
</html>
`;

fs.writeFile('uploadForm.html', htmlContent, (err) => {
    if (err) {
        console.error('Error writing HTML file:', err);
    } else {
        console.log('HTML form file created: uploadForm.html');
    }
});






Q.8 Create a Node.js file that demonstrates create database and table in MySQL.
var mysql = require('mysql');
  var con = mysql.createConnection({ host:"localhost",user: "root", password: ""});

con.connect(function(err) { if (err) throw err; console.log("Connected!");
con.query("CREATE DATABASE mydb", function (err, result) { if (err) throw err;
console.log("Database created");
});
});



Q.9 Create a node.js file that Select all records from the "customers" table, and display  the result object on console.

var mysql = require('mysql');
var con = mysql.createConnection({ host: "localhost",user: "root",password: "", 
database: "mydb" });
con.connect(function(err) { 
if (err) throw err;
con.query("SELECT * FROM customers", function (err, result, fields)
{   if (err) throw err;  console.log(result); });  });



Q.10 Create a node.js file that Insert Multiple Records in "student" table, and display the result object on console.

var mysql = require('mysql');
var con = mysql.createConnection({ host:"localhost"user: "root",password: "", database:"mydb"});

con.connect(function(err) { if (err) throw err; console.log("Connected!");
var sql = "INSERT INTO customers (name, address) VALUES ?";
 var values = [['John', 'Highway 71'],['Peter', 'Lowstreet 4'],['Amy', 'Apple st 652'],
['Hannah', 'Mountain 21'],['Michael', 'Valley 345'],['Sandy', 'Ocean blvd 2'],
['Viola', 'Sideway 1633']];
con.query(sql, [values], function (err, result) { if (err) throw err;
console.log("Number of records inserted: " + result.affectedRows);
});
});



Q.11 Create a node.js file that Select all records from the "customers" table, and delete the specified record.
var mysql = require('mysql');
var con = mysql.createConnection({host:"localhost",user: "root",
password: "", database: "mydb" });

con.connect(function(err) { if (err) throw err;
var sql = "DELETE FROM customers WHERE 
address = 'Shivajinagar,Sangamner'";


con.query(sql, function (err, result) { if (err) throw err;
console.log("Number of records deleted: " + result.affectedRows);
});
});




Q.12 Create a simple web server using node.js

const http = require('http');

const hostname = '127.0.0.1'; // You can change this to your server's IP or domain name
const port = 3000; // You can change this to any available port

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Hello, World!\n');
});

server.listen(port, hostname, () => {console.log(`Server running at http://${hostname}:${port}/`);
});


Q.13 Using nodejs create a User Login System.

Q.14 Using nodejs create a User eLearning System.

Q.15 Using nodejs create a  Recipe Book.

Q.16 write node js script to interact with the filesystem, and serve a web page from a file.

Q.17 Write node js script to build Your Own Node.js Module. Use require (‘http’) module is a built-in Node module that invokes the functionality of the HTTP library to create a local server. Also use the export statement to make functions in your module available externally. Create a new text file to contain the functions in your module called,“modules.js” and add this function to return today’s date and time.
	
Firstmodule.js
exports.myDateTime = function () { return Date();
};

Demo_module.js
var http = require('http');
var dt = require('./firstmodule');

http.createServer(function (req, res) { res.writeHead(200, {'Content-Type': 'text/html'});
res.write("The date and time are currently: " + dt.myDateTime()); res.end();
}).listen(8080);

Output: 
The date and time are currently: Sat Feb 12 2022 12:49:07 GMT+0530 (India Standard Time)



Q.18 Create a js file named main.js for event-driven application. There should be a main loop that listens for events, and then triggers a callback function when one of those events is detected.
// Import events module
   var events = require('events');
// Create an eventEmitter object
var eventEmitter = new events.EventEmitter();
   // Create an event handler as follows
var connectHandler = function connected() {
console.log('connection succesful.');
 // Fire the data_received event  eventEmitter.emit('data_received');
}
// Bind the connection event with the handler eventEmitter.on('connection', connectHandler);
// Bind the data_received event with the anonymous function
 eventEmitter.on('data_received', function(){
  console.log('data received succesfully.');
});
// Fire the connection event eventEmitter.emit('connection'); console.log("Program Ended.");

Output-
connection succesful.
data received succesfully. Program Ended.


Q.19 Write node js application that transfer a file as an attachment on web and enables browser to prompt the user to download file using express js.
var express = require('express'); var app = express();
var PORT = 3000;
app.get('/', function(req, res){ 
res.download('message.txt',function(error){
console.log("Error : ", error)
});
});
app.listen(PORT, function(err){ 
if (err) console.log(err);
console.log("Server listening on PORT", PORT);
});
Output-





Q.20 Create your Django app in which after running the server, you should see on the browser, the text “Hello! I am learning Django”, which you defined in the index view. 
home app
views.py
from django.shortcuts import render 
# Create your views here.
from django.http import HttpResponse 
def display(request):
    return HttpResponse("Hello! I am learning Django")
     
       urls.py
from django.urls import path from .views import display urlpatterns = [
path('display/',display, name="home")
]

test_project  
urls.py
from django.contrib import admin 
from django.urls import path
 from django.urls import include urlpatterns = [
path('admin/', admin.site.urls), path('home/',
 include("home.urls")),]


Output-






Q.21 Design a Django application that adds web pages with views and templates.


Q.22 Write and run Django code to add data to your site using relational databases with Django Object Relational Mapper.


Q.23 Develop a basic poll application .It should consist of two parts:
a) A public site in which user can pick their favourite programming language  and vote.
b)An admin site that lets you add, change and delete programming language.


a)Public site
Languages.html
<form action="select/">
<label>Select Language</label>
<!-- <input type="radio" id="r1" name="r1" value="JAVA">JAVA<br>
<input type="radio" id="r1" name="r1" value="PHP">PHP<br>
<input type="radio" id="r1" name="r1" value="Javascript">Javascript<br> -->
{% for d in lang %}

    <input type="radio" id="r1" name="r1" value="{{d.language}}">{{d.language}}<br>
{%endfor%}
<!--
-->
<input type="submit" name='vote' value="Vote">

<table>
<thead>
<tr>
<th>Language</th>
<th>Total Voting</th>
</tr>
</thead>
<tbody>
{% for c in res %}
<tr>
<td>{{c.langname}}</td>
<td>{{c.name_count}}</td>
</tr>
{%endfor%}
</tbody>
</table>
</form>

models.py

from django.db import models
from django.contrib.auth.models import User


# Create your models here. 
class Language(models.Model):
langname=models.CharField(max_length=63)

STATUS = (
(0,"Draft"),
(1,"Publish")
)
class AdminLang(models.Model): language=models.CharField(max_length=63)
status = models.IntegerField(choices=STATUS, default=0)
 class Meta:
verbose_name_plural = "AdminLang"

def str (self): 
  return self.language

views.py
from django.shortcuts import render
from language.models import Language,AdminLang
  from django.db.models import Count

# Create your views here.
from django.http import HttpResponse

def language(request):
data=AdminLang.objects.all() 
data1={"lang":data}
return render(request,"displaylang.html",data1)

def select(request): langname=request.GET.get('r1')
result=Language.objects.create(langname=langname).save() count=Language.objects.values('langname').annotate(name_count=Count('langname
')).filter(name_count gt=1)
return render(request,"displaylang.html",{"res":count})


urls.py
from django.urls import path
from .views import language,select

urlpatterns = [ path("lang/",language,name="language"), path("lang/select/",select,name="language"),
]
test_project urls.py
from django.contrib import admin from django.urls import path,include

urlpatterns = [
path('admin/', admin.site.urls), path('language/',include("language.urls")),
]

b)Admin site
from django.contrib import admin
from language.models import AdminLang @admin.register(AdminLang)
class AdminLangAdmin(admin.ModelAdmin):
pass

Output –








Admin site:



Q.24 A public site in which user can pick their favourite programming language and vote.

 Q.25  Design a Django application: An admin site that lets you add,   change and delete programming languages

Views.py
from django.shortcuts import render
from language.models import Language,AdminLang 
from django.db.models import Count

# Create your views here.
from django.http import HttpResponse

def language(request):
data=AdminLang.objects.all()
 data1={"lang":data}
return render(request,"displaylang.html",data1)

def select(request):
 langname=request.GET.get('r1')
result=Language.objects.create(langname=langname).save() count=Language.objects.values('langname').annotate(name_count=Count('langname
')).filter(name_count gt=1)
return render(request,"displaylang.html",{"res":count})


urls.py

from django.urls import path
from .views import language,select

urlpatterns = [ path("lang/",language,name="language"), path("lang/select/",select,name="language"),
]


Models.py

from django.db import models
from django.contrib.auth.models import User

# Create your models here. class Language(models.Model):
langname=models.CharField(max_length=63)

STATUS = (
(0,"Draft"),
(1,"Publish")
)

class AdminLang(models.Model):
 language=models.CharField(max_length=63)
status = models.IntegerField(choices=STATUS, default=0) class Meta:
verbose_name_plural = "AdminLang"

def str (self):
 return self.language

admin.py
from django.contrib import admin
from language.models import AdminLang 
@admin.register(AdminLang)
class AdminLangAdmin(admin.ModelAdmin):
      pass

Output :


Q.26 implement a simple Django application for portfolio management.

#Create a new Django project and a new app:
django-admin startproject portfolio_management
cd portfolio_management
python manage.py startapp portfolio

#Define Models
#Edit portfolio/models.py:

from django.db import models

class Portfolio(models.Model):
    name = models.CharField(max_length=100)
    owner = models.CharField(max_length=100)

    def __str__(self):
        return self.name

class Investment(models.Model):
    portfolio = models.ForeignKey(Portfolio, on_delete=models.CASCADE)
    symbol = models.CharField(max_length=10)
    shares = models.PositiveIntegerField()
    purchase_price = models.DecimalField(max_digits=10, decimal_places=2)
    purchase_date = models.DateField()

    def __str__(self):
        return self.symbol


# Create and Apply Migrations:

python manage.py makemigrations
python manage.py migrate


# Create Admin Panel
# Edit portfolio/admin.py:
from django.contrib import admin
from .models import Portfolio, Investment

admin.site.register(Portfolio)
admin.site.register(Investment)

#Create Views
#portfolio/views.py
from django.shortcuts import render, redirect
from .models import Portfolio, Investment
from .forms import PortfolioForm, InvestmentForm

def portfolio_list(request):
    portfolios = Portfolio.objects.all()
    return render(request, 'portfolio/portfolio_list.html', {'portfolios': portfolios})

def add_portfolio(request):
    if request.method == 'POST':
        form = PortfolioForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('portfolio_list')
    else:
        form = PortfolioForm()
    return render(request, 'portfolio/add_portfolio.html', {'form': form})

# Implement other views for adding investments, editing portfolios, etc.


#Create Forms
# Create a forms.py file in the portfolio app:
from django import forms
from .models import Portfolio, Investment

class PortfolioForm(forms.ModelForm):
    class Meta:
        model = Portfolio
        fields = ['name', 'owner']

class InvestmentForm(forms.ModelForm):
    class Meta:
        model = Investment
        fields = ['portfolio', 'symbol', 'shares', 'purchase_price', 'purchase_date']




#Create Templates
#Create HTML templates for rendering views. You'll need templates for listing portfolios, adding portfolios, adding investments, and other views.

#Define URLs

Define URL patterns for your views in the portfolio/urls.py file. Don't forget to include this in the project's main urls.py.


#Run the Server:
python manage.py runserver




Q.27 Create your own blog using Django.
Base.html
<!DOCTYPE html>
<html>

<head>
<title>Django Central</title>
<link href="https://fonts.googleapis.com/css?family=Roboto:400,700" rel="stylesheet">
<meta name="google" content="notranslate" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384- Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
crossorigin="anonymous" />
</head>

<body>
<style>
body {
font-family: "Roboto", sans-serif; font-size: 17px;
background-color: #fdfdfd;
}
.shadow {
box-shadow: 0 4px 2px -2px rgba(0, 0, 0, 0.1);
         }
.btn-danger { color: #fff;
background-color: #f00000; border-color: #dc281e;
}
.masthead { background: #3398E1; height: auto;
padding-bottom: 15px;
box-shadow: 0 16px 48px #E3E7EB; padding-top: 10px;
}
</style>

<!-- Navigation -->
<nav class="navbar navbar-expand-lg navbar-light bg-light shadow" id="mainNav">
<div class="container-fluid">
<a class="navbar-brand" href="{% url 'home' %}">Django central</a>
       <button class="navbar-toggler navbar-toggler-right" type="button" data- toggle="collapse" data-target="#navbarResponsive"
         aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
<span class="navbar-toggler-icon"></span>
</button>
<div class="collapse navbar-collapse" id="navbarResponsive">
<ul class="navbar-nav ml-auto">
<li class="nav-item text-black">
<a class="nav-link text-black font-weight-bold" href="#">About</a>
</li>
<li class="nav-item text-black">
<a class="nav-link text-black font-weight-bold" href="#">Policy</a>


</li>
<li class="nav-item text-black">
<a class="nav-link text-black font-weight-bold" href="#">Contact</a>
</li>
</ul>
</div>
</div>
</nav>



{% block content %}
<!-- Content Goes here -->
{% endblock content %}
<!-- Footer -->
<footer class="py-3 bg-grey">
<p class="m-0 text-dark text-center ">Copyright &copy; Django Central</p>
</footer>
</body>
</html>


Index.html
{% extends "base.html" %}
{% block content %}
<style>
body {
font-family: "Roboto", sans-serif; font-size: 18px;
background-color: #fdfdfd;
}

.head_text { color: white;
}

.card {
box-shadow: 0 16px 48px #E3E7EB;
}
</style>

<header class="masthead">
<div class="overlay"></div>
<div class="container">
<div class="row">
<div class=" col-md-8 col-md-10 mx-auto">
<div class="site-heading">
<h3 class=" site-heading my-4 mt-3 text-white"> Welcome to my Awesome Blog
</h3>
{% comment %} <p class="text-light">We Love Django As much as you do..! &nbsp
{% endcomment %}
</p>
</div>
</div>
</div>
</div>
</header>
<div class="container">
<div class="row">
<!-- Blog Entries Column -->
<div class="col-md-8 mt-3 left">
{% for post in post_list %}
<div class="card mb-4">
<div class="card-body">
<h2 class="card-title">{{ post.title }}</h2>
<p class="card-text text-muted h6">{{ post.author }} | {{ post.created_on}} </p>
<p class="card-text">{{post.content|slice:":200" }}</p>
<a href="{% url 'post_detail' post.slug %}" class="btn btn-primary">Read More
&rarr;</a>
</div>
</div>
{% endfor %}
</div>
{% block sidebar %} {% include 'sidebar.html' %} {% endblock sidebar %}
</div>
</div>
{%endblock%}

Sidebar.html
{% block sidebar %}

<style>
.card{
box-shadow: 0 16px 48px #E3E7EB;


}

</style>

<!-- Sidebar Widgets Column -->
<div class="col-md-4 float-right ">
<div class="card my-4">

</div>
</div>

{% endblock sidebar %}

Post_detail.html
{% extends 'base.html' %} {% block content %}

<div class="container">
<div class="row">
<div class="col-md-8 card mb-4 mt-3 left top">
<div class="card-body">
<h1>{% block title %} {{ object.title }} {% endblock title %}</h1>
<p class=" text-muted">{{ post.author }} | {{ post.created_on }}</p>
<p class="card-text ">{{ object.content | safe }}</p>
</div>
</div>
{% block sidebar %} {% include 'sidebar.html' %} {% endblock sidebar %}
</div>
</div>

{% endblock content %}
Admin.py
from django.contrib import admin from .models import Post

class PostAdmin(admin.ModelAdmin):
list_display = ('title', 'slug', 'status','created_on') list_filter = ("status",)
search_fields = ['title', 'content'] prepopulated_fields = {'slug': ('title',)}

admin.site.register(Post, PostAdmin)
models.py

from django.db import models
from django.contrib.auth.models import User
STATUS = (
(0,"Draft"),
(1,"Publish")
)

class Post(models.Model):
title = models.CharField(max_length=200, unique=True) slug = models.SlugField(max_length=200, unique=True)
author = models.ForeignKey(User, on_delete= models.CASCADE,related_name='blog_posts') updated_on = models.DateTimeField(auto_now= True)
content = models.TextField()
created_on = models.DateTimeField(auto_now_add=True) status = models.IntegerField(choices=STATUS, default=0)

class Meta:
ordering = ['-created_on']

def   str (self): return self.title

views.py

from django.views import generic from .models import Post

class PostList(generic.ListView):
queryset = Post.objects.filter(status=1).order_by('-created_on') template_name = 'index.html'

class PostDetail(generic.DetailView): model = Post
template_name = 'post_detail.html'
urls.py
from . import views
from django.urls import path

urlpatterns = [
path('', views.PostList.as_view(), name='about'),
path('<slug:slug>/', views.PostDetail.as_view(), name='post_detail'),
]



Output:



Q.28 Build your own To-Do app in Django.

Q.29 Create a clone of the Hacker Newswebsite.

Q.30 Develop Online School System using  Django.

Q.31 Implement your E-commerce Website using Django.

Q.32 Implement Login System using Django.

home app forms.py
   from django import forms
   class LoginForm(forms.Form):
 username=forms.CharField(max_length=63)             password=forms.CharField(max_length=63,widget=forms.PasswordInput)

login.html
<form method="post">
{{ form.as_p }}
{% csrf_token %}
<button type="submit">Submit</button>
</form>

views.py
from django.shortcuts import render from . import forms
def login(request): form=forms.LoginForm()
if request.method=='POST': form=forms.LoginForm(request.POST) if form.is_valid():
return HttpResponse("Login Ok")
    return render(request,'login.html',context={'form':form}) urls.py

from django.urls import path from .views import login urlpatterns = [
path('logins/',login, name="home"),
]
test_project
from django.contrib import admin from django.urls import path from django.urls import include urlpatterns = [
path('home/', include("home.urls")),
]


Output:





 

